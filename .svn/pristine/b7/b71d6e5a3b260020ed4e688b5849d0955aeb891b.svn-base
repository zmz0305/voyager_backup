package edu.illinois.ncsa.cline.voyager;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.lang.ProcessBuilder.Redirect;
import java.util.ArrayList;

/**
 * this class offers the functionality to execute commands on server
 * @author zmz0305
 */
public class Executor {
    /** array list of command, first element is the command and following elements are args */
    private ArrayList<String> commandList;
    
    /** if set to keep log, logDestination will be the log file */
    private String logDestination;
    
    /** flag for whether keep log */
    private boolean ifKeepLog;

    /**
     * use system command tail to get the last lines of the log file
     * 
     * @param file the file we want to read
     * @param nLines last n lines we want to read
     * @return the last N lines of file
     * @throws IOException 
     */
    public static String getLastNLogLines(File file, int nLines) throws IOException {
        StringBuilder s = new StringBuilder();

        Process p = Runtime.getRuntime().exec("tail -" + nLines + " " + file);
        BufferedReader input = new BufferedReader(new InputStreamReader(
            p.getInputStream()));
        BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
        String line = null;
        
        while ((line = error.readLine()) != null) {
            s.append(line + '\n');
        }
        
        while ((line = input.readLine()) != null) {
            s.append(line + '\n');
        }

        return s.toString();
    }

    /**
     * @param file
     * @param bytes
     * @return last N bytes of text of that file
     * @throws IOException
     */
    public static String getLastNLogBytes(File file, int bytes) throws IOException {
        StringBuilder s = new StringBuilder();
        String line = null;

        if(file.length() <= bytes){
            BufferedReader input = new BufferedReader(new FileReader(file));
            input.readLine();
            while((line = input.readLine()) != null){
                s.append(line+"\n");
            }
            input.close();
            return s.toString();
        } else {
            RandomAccessFile input = new RandomAccessFile(file, "r");
            int size = (int)file.length();
            input.skipBytes(size - bytes);
            input.readLine();
            while((line = input.readLine()) != null){
                s.append(line+"\n");
            }
            input.close();
            return s.toString();
        }
    }
    
    /**
     * this is the constructor of Executor. The offered command must not be
     * empty. If log path is not specified or just "", then log path is current
     * directory by default
     * 
     * @param s a list of strings represent the command and its parameters
     * @param ld the path you want to store standard output as log
     * @param keepLog if keep log or not
     */
    public Executor(ArrayList<String> s, String ld, boolean keepLog) {
        //check if command is empty
        if (s.size() > 0 && !s.get(0).equals("")) {
            commandList = s;
        } else {
            System.out.println("Check the requirements of the offered command");
        }

        if (keepLog) {
            ifKeepLog = true;
            if (ld != "" && ld != null) {
                logDestination = new String(ld);
            } else {
                logDestination = new String("./exeLog");
            }
        } else {
            ifKeepLog = false;
        }

    }

    /**
     * this function makes the execution
     * 
     * @return inputStream (actually just stdout and stderr) if log file is not required
     * @throws IOException
     * @throws InterruptedException
     */
    public String executeCommand() throws IOException, InterruptedException {
//        System.out.println(commandList.toString());
        ProcessBuilder pb = new ProcessBuilder(commandList);
        pb.directory(new File("."));
        
        // merge error with standard output
        pb.redirectErrorStream(true);
        if (ifKeepLog) {
            File log = new File(logDestination);
            pb.redirectOutput(Redirect.appendTo(log));
        }
        Process p = pb.start();
        String line = null;
        StringBuilder s = new StringBuilder();

        // if we do not need log, return the inputStream directly, 
        // otherwise keep the inputStream in log and return null
        if (!ifKeepLog) {
            BufferedReader input = new BufferedReader(new InputStreamReader(
                p.getInputStream()));
            while ((line = input.readLine()) != null) {
                s.append(line + '\n');
            }
            return s.toString();
        } else {
            return null;
        }
        // p.waitFor();
    }

    /**
     * get the last n lines of the log file
     * 
     * @param nLines
     *            number of lines
     * @return strings of the log file
     * @throws IOException
     */
    public String getLog(int nLines) throws IOException {
        File log = new File(logDestination);
        return getLastNLogLines(log, nLines);
    }

}
